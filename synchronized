public class ProducerConsumer {
    private static final int BUFFER_SIZE = 5;
    private final int[] buffer = new int[BUFFER_SIZE];
    private int count = 0, in = 0, out = 0;
    
    public synchronized void produce(int item) throws InterruptedException {
        while(count == BUFFER_SIZE) {
            wait();
        }
        buffer[in] = item;
        in = (in + 1) % BUFFER_SIZE;
        count++;
        notifyAll();
        System.out.println("Produced: " + item);
    }
    
    public synchronized int consume() throws InterruptedException {
        while(count == 0) {
            wait();
        }
        int item = buffer[out];
        out = (out + 1) % BUFFER_SIZE;
        count--;
        notifyAll();
        System.out.println("Consumed: " + item);
        return item;
    }
    
    public static void main(String[] args) {
        ProducerConsumer pc = new ProducerConsumer();
        
        Thread producer = new Thread(() -> {
            for (int i = 1; i <= 20; i++) {
                try {
                    pc.produce(i);
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });
        
        Thread consumer = new Thread(() -> {
            for (int i = 1; i <= 20; i++) {
                try {
                    pc.consume();
                    Thread.sleep(150);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });
        
        producer.start();
        consumer.start();
    }
}
